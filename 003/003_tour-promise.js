const allTours = {
  tours: [
    "Україна",
    "Європа",
    "Азія",
    "Африка",
    "Америка",
    "Австралія",
    "Антарктида",
    "Для однієї людини",
    "Для двох",
    "Для компанії",
    "Для сім'ї",
    "Активний відпочинок",
    "Екскурсії",
    "Круїзи",
    "Відпочинок на морі",
  ],
  seasons: ["зима", "весна", "літо", "осінь"],
};

let isAllGood = false; // Перевірка наявності всіх властивостей туру
let missingTours = []; // Відсутні властивості туру
let selectedTours = []; // Вибрані властивості туру
let selectedSeason = ""; // Вибраний сезон туру

// Функція для отримання замовлення
// Вона перевіряє, чи всі необхідні тури доступні, і формує список вибраних властивостей туру та сезону
// Повертає проміс, який буде виконано або відхилено в залежності від наявності турів
// Якщо тури відсутні, проміс буде відхилено з повідомленням про помилку
let getOrder = (tours, season, selection) => {
  missingTours = tours.filter((tour) => !allTours.tours.includes(tour));
  isAllGood = !missingTours.length;
  selectedTours = allTours.tours.filter((tour) => tours.includes(tour));
  selectedSeason = season;
};

// Функція для виконання замовлення
// Вона повертає проміс, який буде виконано або відхилено в залежності від наявності властивостей туру
// Якщо якісь властивості туру відсутні, проміс буде відхилено з повідомленням про помилку
let orderFulfillment = (time, work) => {
  return new Promise((resolve, reject) => {
    if (isAllGood) {
      setTimeout(() => {
        resolve(work());
      }, time);
    } else {
      reject(
        `Вибачте, але наразі у нас відсутні такі тури / напрямки: ${missingTours.join(
          ", "
        )}. Спробуйте обрати інші напрямки.`
      );
    }
  });
};

// Функції для виконання різних етапів замовлення
// Кожна функція виводить повідомлення про виконання відповідного етапу замовлення
// Вони використовуються як аргументи для промісів, які виконуються послідовно
// Кожна функція виконується після успішного виконання попередньої

// Функція для початку пошуку турів з вибраними параметрами
let selectionTour = () => {
  console.log(
    `Починаємо шукати тури з такими параметрами:\n${selectedTours.join(
      ", "
    )}\nДля сезону ${selectedSeason}.`
  );
};

// Функція для перевірки напрямків турів
let checkTours = () => {
  console.log("Перевірка напрямків завершено.");
};

// Функція для вибору сезону туру
let seasonSelection = () => {
  console.log("Сезон обрано.");
};

// Функція для бронювання місця проживання
let booking = () => {
  console.log("Бронювання місця проживання завершено.");
};

// Функція для організації трансферу до місця відпочинку
let transfer = () => {
  console.log("Трансфер до місця відпочинку організовано.");
};

// Функція для придбання білетів
let tickets = () => {
  console.log("Білети придбані.");
};

// Функція для завершення замовлення туру
let orderCompletion = () => {
  console.log(
    "Тур заброньовано та видано клієнту. Гарної подорожі, настрою та погоди!"
  );
};

// Виклик функції для отримання замовлення з вибраними властивостями туру та сезоном
getOrder(
  ["Європа", "Для двох", "Активний відпочинок", "Відпочинок на морі"],
  "літо"
);

// Виклик функції для виконання замовлення
// Використовує проміси для послідовного виконання етапів замовлення
// Кожен етап виконується після успішного виконання попереднього
orderFulfillment(2000, selectionTour)
  .then(() => {
    return orderFulfillment(1000, checkTours);
  })
  .then(() => {
    return orderFulfillment(1000, seasonSelection);
  })
  .then(() => {
    return orderFulfillment(2000, booking);
  })
  .then(() => {
    return orderFulfillment(3000, transfer);
  })
  .then(() => {
    return orderFulfillment(2000, tickets);
  })
  .then(() => {
    return orderFulfillment(2000, orderCompletion);
  })
  // Обробка помилок, якщо проміси були відхилені
  .catch((error) => {
    console.log(error);
  })
  // Виконується в будь-якому випадку, незалежно від того, чи було виконано проміси успішно чи з помилкою
  .finally(() => {
    console.log("Раді бачити вас ще!");
  });
